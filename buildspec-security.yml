version: 0.2

# CodeBuild specification for Security Scanning
# Comprehensive security analysis with SAST, DAST, and dependency scanning

env:
  variables:
    PYTHON_VERSION: "3.9"
    NODE_VERSION: "18"
    PROJECT_NAME: "voice-assistant-ai"
  parameter-store:
    AWS_ACCOUNT_ID: "/voice-assistant/aws-account-id"
  secrets-manager:
    SNYK_TOKEN: "voice-assistant/snyk:token"
    CHECKMARX_TOKEN: "voice-assistant/checkmarx:token"

phases:
  install:
    runtime-versions:
      python: $PYTHON_VERSION
      nodejs: $NODE_VERSION
    commands:
      - echo "Installing security scanning tools..."
      - apt-get update -y
      - apt-get install -y zip unzip jq curl git wget
      
      # Install Python security tools
      - pip install --upgrade pip
      - pip install bandit safety semgrep
      
      # Install Node.js security tools
      - npm install -g npm-audit-resolver audit-ci
      
      # Install Snyk CLI
      - npm install -g snyk
      
      # Install OWASP Dependency Check
      - wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
      - unzip dependency-check-8.4.0-release.zip
      - export PATH=$PATH:$(pwd)/dependency-check/bin
      
      # Install TruffleHog for secrets scanning
      - curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
      
      # Install Semgrep
      - python -m pip install semgrep

  pre_build:
    commands:
      - echo "Pre-build phase started on `date`"
      - echo "Setting up security scanning environment..."
      - export ENVIRONMENT=${ENVIRONMENT:-security}
      
      # Authenticate with security services
      - |
        if [ ! -z "$SNYK_TOKEN" ]; then
          snyk auth $SNYK_TOKEN
        fi

  build:
    commands:
      - echo "Security scanning phase started on `date`"
      
      # 1. Secrets Scanning
      - echo "Running secrets scanning with TruffleHog..."
      - trufflehog filesystem . --json --output trufflehog-report.json || true
      
      # 2. Static Application Security Testing (SAST)
      - echo "Running SAST with Bandit (Python)..."
      - bandit -r backend/ -f json -o bandit-sast-report.json || true
      
      - echo "Running SAST with Semgrep..."
      - semgrep --config=auto --json --output=semgrep-report.json . || true
      
      # 3. Dependency Vulnerability Scanning
      - echo "Running Python dependency scanning with Safety..."
      - safety check --json --output safety-report.json || true
      
      - echo "Running Node.js dependency scanning with npm audit..."
      - cd frontend
      - npm audit --audit-level=moderate --json > ../npm-audit-report.json || true
      - cd ..
      
      - echo "Running dependency scanning with Snyk..."
      - |
        if [ ! -z "$SNYK_TOKEN" ]; then
          snyk test --json > snyk-report.json || true
          snyk test --file=frontend/package.json --json > snyk-frontend-report.json || true
        fi
      
      - echo "Running OWASP Dependency Check..."
      - dependency-check.sh --project "Voice Assistant AI" --scan . --format JSON --out dependency-check-report.json --suppression dependency-check-suppressions.xml || true
      
      # 4. Infrastructure Security Scanning
      - echo "Running Terraform security scanning..."
      - |
        if command -v tfsec &> /dev/null; then
          tfsec infra/terraform --format json --out tfsec-report.json || true
        else
          echo "tfsec not available, skipping Terraform security scan"
        fi
      
      # 5. Container Security Scanning (if applicable)
      - echo "Running container security scanning..."
      - |
        if [ -f Dockerfile ]; then
          if command -v trivy &> /dev/null; then
            trivy fs --format json --output trivy-report.json . || true
          else
            echo "Trivy not available, skipping container security scan"
          fi
        fi
      
      # 6. License Compliance Scanning
      - echo "Running license compliance scanning..."
      - pip install pip-licenses
      - pip-licenses --format=json --output-file=python-licenses.json || true
      - cd frontend && npx license-checker --json --out ../frontend-licenses.json && cd .. || true
      
      # 7. Cloud Security Posture Scanning
      - echo "Running AWS security configuration checks..."
      - |
        if command -v prowler &> /dev/null; then
          prowler aws --output-modes json --output-file prowler-report.json || true
        else
          echo "Prowler not available, skipping AWS security scan"
        fi

  post_build:
    commands:
      - echo "Post-build phase started on `date`"
      
      # Generate Security Report Summary
      - echo "Generating security report summary..."
      - |
        cat > security-summary.json << EOF
        {
          "timestamp": "$(date -Iseconds)",
          "environment": "$ENVIRONMENT",
          "scans_performed": {
            "secrets_scanning": {
              "tool": "TruffleHog",
              "report_file": "trufflehog-report.json"
            },
            "sast_scanning": {
              "tools": ["Bandit", "Semgrep"],
              "report_files": ["bandit-sast-report.json", "semgrep-report.json"]
            },
            "dependency_scanning": {
              "tools": ["Safety", "npm audit", "Snyk", "OWASP Dependency Check"],
              "report_files": ["safety-report.json", "npm-audit-report.json", "snyk-report.json", "dependency-check-report.json"]
            },
            "infrastructure_scanning": {
              "tools": ["tfsec"],
              "report_files": ["tfsec-report.json"]
            },
            "license_scanning": {
              "tools": ["pip-licenses", "license-checker"],
              "report_files": ["python-licenses.json", "frontend-licenses.json"]
            }
          }
        }
        EOF
      
      # Parse and summarize critical findings
      - echo "Parsing security findings..."
      - |
        python3 << 'EOF'
        import json
        import os
        
        def count_findings(file_path, severity_key=None):
            if not os.path.exists(file_path):
                return {"high": 0, "medium": 0, "low": 0, "total": 0}
            
            try:
                with open(file_path, 'r') as f:
                    data = json.load(f)
                
                # This is a simplified parser - would need specific logic for each tool
                if isinstance(data, list):
                    total = len(data)
                elif isinstance(data, dict):
                    total = len(data.get('results', []))
                else:
                    total = 0
                
                return {"high": 0, "medium": 0, "low": 0, "total": total}
            except:
                return {"high": 0, "medium": 0, "low": 0, "total": 0}
        
        # Count findings from each tool
        findings = {
            "secrets": count_findings("trufflehog-report.json"),
            "sast_bandit": count_findings("bandit-sast-report.json"),
            "sast_semgrep": count_findings("semgrep-report.json"),
            "dependencies_python": count_findings("safety-report.json"),
            "dependencies_npm": count_findings("npm-audit-report.json"),
            "dependencies_snyk": count_findings("snyk-report.json")
        }
        
        with open("security-findings-summary.json", "w") as f:
            json.dump(findings, f, indent=2)
        
        print("Security findings summary generated")
        EOF
      
      # Archive Security Reports
      - echo "Archiving security reports..."
      - mkdir -p security-reports
      - cp *.json security-reports/ 2>/dev/null || true
      
      # Check for critical security issues
      - echo "Checking for critical security issues..."
      - |
        if [ -f security-findings-summary.json ]; then
          python3 << 'EOF'
        import json
        import sys
        
        with open("security-findings-summary.json", "r") as f:
            findings = json.load(f)
        
        critical_issues = 0
        for tool, counts in findings.items():
            critical_issues += counts.get("high", 0)
        
        print(f"Total critical security issues found: {critical_issues}")
        
        if critical_issues > 10:  # Threshold for failing the build
            print("CRITICAL: Too many high-severity security issues found!")
            sys.exit(1)
        EOF
        fi
      
      - echo "Security scanning completed!"

artifacts:
  files:
    - 'security-reports/**/*'
  name: security-artifacts

reports:
  security-reports:
    files:
      - 'security-reports/*.json'
    file-format: 'JSON'

cache:
  paths:
    - '/root/.cache/pip/**/*'
    - '/root/.npm/**/*'
    - '/root/.snyk/**/*'
